# -*- coding: utf-8 -*-
"""Notes Nave Bayes Q2 Asiignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZ5UKK9wrX5kUpMxtQIjPfuf1IPPMzgK

<h1>ASSIGNMENT 2 :  FAKE BANK NOTES CLASSIFICATION<h1>

<h1>Tushant Yadav 2K18/EE/224<br>
Nishkarsh Sharma 2K18/PE/040<h1>

IMPORTING LIBRARIES
"""

import numpy as np
import matplotlib.pyplot as plt 
from sklearn import metrics
from sklearn.metrics import classification_report, plot_roc_curve
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
import seaborn as sns
sns.set()

"""READING INPUT FROM CSV FILE"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/banknote.csv',names=["Variance", "Skewness", "Curtosis","Entropy","Class"])

dataset.head(5)

"""DATASET SPLITING AS PER CLASSES"""

real = dataset[dataset['Class']==1]
fake = dataset[dataset['Class']==0]
fake_test, fake_train = train_test_split(fake , test_size=0.5)
real_test, real_train = train_test_split(real , test_size=0.5)

fake_test

fake_train

real_train

real_test

""" SPLITTING IN X AND Y"""

testset = pd.concat([real_test, fake_test])
trainset = pd.concat([real_train, fake_train])

trainX = trainset.iloc[:, :-1]
trainY = trainset.iloc[:, 4:5].values.ravel()

testX = testset.iloc[:, :-1]
testY = testset.iloc[:, 4:5].values.ravel()

"""PREDICTION BASED ON PRIOR """

classifier = GaussianNB()
classifier.fit(trainX.values, trainY)
prediction = classifier.predict(testX)
prediction_train =  classifier.predict(trainX)
print(classification_report(prediction_train,trainY))
print(classification_report(prediction,testY))

"""CONFUSION MATRICIES"""

# Train Accuracy
cm = confusion_matrix(trainY, prediction_train)
plt.figure(figsize=(5, 5))
ax = sns.heatmap(cm, annot=True, fmt="d")
plt.ylabel('True Values')
plt.xlabel('Predicted Values')

accuracy = accuracy_score(trainY, prediction)
print(f"Classification Accuracy: {accuracy}")

# Test Accuracy
cm = confusion_matrix(testY, prediction)
plt.figure(figsize=(5, 5))
ax = sns.heatmap(cm, annot=True, fmt="d")
plt.ylabel('True Values')
plt.xlabel('Predicted Values')

accuracy = accuracy_score(testY, prediction)
print(f"Classification Accuracy: {accuracy}")

"""  ROC CURVE 1"""

fpr, tpr, thresholds = metrics.roc_curve(testY, prediction)
roc_auc = metrics.auc(fpr, tpr)

print('ROC_AUC = ', roc_auc)

display = metrics.RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc , estimator_name= None)
display.plot()  
plt.show()

"""CHANGING PRIORS TO 0.1 AND 0.9"""

classifier.class_prior_ = [0.1,0.9]
prediction = classifier.predict(testX)
prediction_train =  classifier.predict(trainX)
print(classification_report(prediction_train,trainY))
print(classification_report(prediction,testY))

"""CONFUSION MATRICIES"""

# Train Accuracy
cm = confusion_matrix(trainY, prediction_train)
plt.figure(figsize=(5, 5))
ax = sns.heatmap(cm, annot=True, fmt="d")
plt.ylabel('True Values')
plt.xlabel('Predicted Values')

accuracy = accuracy_score(trainY, prediction_train)
print(f"Classification Accuracy: {accuracy}")

# Test Accuracy
cm = confusion_matrix(testY, prediction)
plt.figure(figsize=(5, 5))
ax = sns.heatmap(cm, annot=True, fmt="d")
plt.ylabel('True Values')
plt.xlabel('Predicted Values')

accuracy = accuracy_score(testY, prediction)
print(f"Classification Accuracy: {accuracy}")

"""ROC CURVE 2"""

fpr, tpr, thresholds = metrics.roc_curve(testY, prediction)
roc_auc = metrics.auc(fpr, tpr)

print('ROC_AUC = ', roc_auc)

display = metrics.RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc , estimator_name= None)
display.plot()  
plt.show()